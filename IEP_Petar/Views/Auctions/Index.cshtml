@model PagedList.IPagedList<IEP_Petar.Models.Auction>
@using PagedList.Mvc;
@using Microsoft.AspNet.Identity;
@using IEP_Petar.Models;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Index";
}

<style>
    img {
        max-width: 100%;
    }
.btn-custom {
  background-color: hsl(218, 71%, 30%) !important;
  background-repeat: repeat-x;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#6291e4", endColorstr="#163e82");
  background-image: -moz-linear-gradient(top, #6291e4, #163e82);
  background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #6291e4), color-stop(100%, #163e82));
  background-image: -webkit-linear-gradient(top, #6291e4, #163e82);
  background-image: -o-linear-gradient(top, #6291e4, #163e82);
  background-image: linear-gradient(#6291e4, #163e82);
  border-color: #163e82 #163e82 hsl(218, 71%, 21.5%);
  color: #fff !important;
  text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.56);
  -webkit-font-smoothing: antialiased;
  border-radius:10px;
}

.tbclass {
    height:30px;
    width:150px;
}

.priceclass {
    height:30px;
    width:50px;
}

.selectclass {
    height:30px;
    width:100px;
}

.customclass {
    margin-top:1.7em;
}
</style>

<h2></h2>

    <p>@ViewBag.BiddingError</p>
    <p id="errors" style="color:red;visibility:hidden;"></p>

<div class="row">
    @using (Html.BeginForm("Index", "Auctions", FormMethod.Get))
    {
        <div class="col-xs-12">
            <div class="row">
                <div class="form-group col-xs-4">
                    <label for="#search">Product:</label> <input class="form-control" id="search" name="search" type="text" value="" />
                </div>
                <div class="form-group col-xs-2">
                    <label for="#minPrice">Min:</label><input id="minPrice" class="form-control" style="width:75%;" name="minPrice" type="number" />
                </div>
                <div class="form-group col-xs-2">
                    <label for="#maxPrice">Max:</label><input id="maxPrice" class="form-control" style="width:75%;" name="maxPrice" type="number" />
                </div>
                <div class="form-group col-xs-2">
                    <label for="#status">State:</label><select class="form-control" id="status" name="status">
                        <option value="ALL">All auctions</option>
                        @if (User.IsInRole("Admin"))
                        {
                            <option value="DRAFT">Draft</option>
                            <option value="READY">Ready</option>
                        }
                        <option value="OPEN">Open</option>
                        <option value="SOLD">Sold</option>
                        <option value="EXPIRED">Expired</option>
                    </select>
                </div>
                <div class="col-xs-2">
                    <button class="btn-custom btn" style="margin-top:1.7em;"> Filter </button>
                    @if (User.IsInRole("Admin"))
                    {
                        @Html.ActionLink("New", "Create", null, new { @class = "btn btn-custom customclass" })
                    }
                </div>
            </div>
        </div>
    }

    <br /><br />
</div>

    @{ int i = 0;}

@foreach (var item in Model) {
    i++;
    <div class="col-sm-3" style="padding:5px 10px 5px 10px; text-align:center; height:100%;">
        <div class="well well-sm" style="height:420px;border-radius:10px;">
            @if (item.State != 6)
            {
                if (item.State == Auction.OPEN || item.State == Auction.SOLD || item.State == Auction.EXPIRED || User.IsInRole("Admin"))
                {
                    <div style="word-wrap: break-word;font-size:x-large;">
                        <a href="/Auctions/Details/@item.AuctionId"><b>@Html.DisplayFor(modelItem => item.ProductName)</b><br/></a>
                    </div>
                    <div align="center">
                        <img class="img-rounded" src="data:image;base64,@System.Convert.ToBase64String(item.Photo)" height="150" width="150" style="padding-top:7px;padding-bottom:7px;" /><br/><br/>
                    </div>
                        string stateId = "state" + item.AuctionId;
                        string timeId = "time" + item.AuctionId;
                        string innerTimeId = "innerTime" + i;
                    <div>
                        <div id="@timeId" style="font-size:x-large;font-weight:bold;">
                            <div id="@innerTimeId"></div>
                        </div>
                    </div>
                    <br/>
                    <div id="@stateId" style="font-weight:bold;font-size:medium;">
                        @if (item.State == Auction.DRAFT)
                        {
                            <p><b>DRAFT</b></p>
                        }
                        @if (item.State == Auction.READY)
                        {
                            <p><b>READY</b></p>
                        }
                        @if (item.State == Auction.OPEN)
                        {
                            <p style="color:green;"><b>OPEN</b></p>
                        }
                        @if (item.State == Auction.SOLD)
                        {
                            <p style="color:blue;"><b>SOLD</b></p>
                        }
                        @if (item.State == Auction.EXPIRED)
                        {
                            <p style="color:red;"><b>EXPIRED</b></p>
                        }
                    </div>
                string bidderId = "bidder" + item.AuctionId;
                    <div id="@bidderId">
                        @if (item.ApplicationUser != null)
                        {
                            var bidderString = item.ApplicationUser.Name + " " + item.ApplicationUser.Surname;
                            @bidderString
                        }
                        @if (item.ApplicationUser == null)
                        {
                            <div>No bids yet!</div>
                        }
                    </div>
                        string priceId = "price" + item.AuctionId;
                string price = item.CurrentPrice + " din";
                        <div id="@priceId">
                            @price
                        </div>
                        <br/>
                    if (User.IsInRole("Admin"))
                    {
                        <div>
                            @if (item.State == 1 || item.State == 2)
                            {
                                var blankSpace = " ";
                                if (item.State == 2)
                                {
                                    @Html.ActionLink("Open", "Open", new { id = item.AuctionId }, new { @class = "btn btn-custom"})
                                }
                                if (item.State == 1) {
                                    @Html.ActionLink("Edit", "Edit", new { id = item.AuctionId }, new { @class = "btn btn-custom" })
                                }
                                @blankSpace @Html.ActionLink("Delete", "Delete", new { id = item.AuctionId }, new { @class = "btn btn-custom" })
                            }
                        </div>
                    }
                    else
                    {
                        var rv = Convert.ToBase64String(item.RowVersion); var rvId = "rv" + item.AuctionId;
                        var bidBtnId = "bid" + item.AuctionId;
                        <input type="hidden" id="@rvId" value="@rv" />
                        <div>
                            @if (item.State == 3 && User.Identity.IsAuthenticated)
                            {
                                <button class="btnBid btn btn-custom" id="@bidBtnId">Bid!</button>
                            }
                        </div>
                    }
                }
            }
        </div>
    </div>
}

@while (i % 4 != 0)
{
    <div class="col-sm-3"></div>
    i++;
}

<div class="row">

@{ i = 0;}

    @while (i < 4)
    {
        i++;
        <div class="col-sm-3"></div>
    }
</div>

<input type="hidden" id="user" value="@User.Identity.GetUserId()"/>

<br/><div class="row" style="text-align:center;">
@if (ViewBag.Pagination) {
    <text>
        Page 
        @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) 
        of 
        @Model.PageCount

    @Html.PagedListPager(Model, page => Url.Action("Index", "Auctions",
        new { page, currentSearch = ViewBag.CurrentSearch, currentMin = ViewBag.CurrentMin, currentMax = ViewBag.CurrentMax, currentStatus = ViewBag.CurrentStatus }))
    </text>
}
</div>
@section scripts {
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        $(function () {

            var conn = $.connection.auctionsHub;

            var myTimers = [null, null, null, null, null, null, null, null, null, null, null, null];

            conn.client.newBid = function (AuctionID, lastBidder, currentPrice, newRowVersion) {

                document.getElementById("bidder" + AuctionID).innerHTML = lastBidder;
                document.getElementById("price" + AuctionID).innerHTML = currentPrice + " din";
                document.getElementById("rv" + AuctionID).value = newRowVersion;

                document.getElementById("errors").innerHTML = "";
                document.getElementById("errors").visibility = "hidden";
            };

            conn.client.unsuccessfulBid = function () {
                document.getElementById("errors").innerHTML = "You don't have enough tokens to bid in this auction!";
                document.getElementById("errors").style.visibility = "visible";
            };

            conn.client.debugMessage = function (message) {
                alert(message);
            };

            conn.client.tickTime = function (AuctionID, newTime, newState) {

                var innerTimeElementId = getIdOfInnerElement("time" + AuctionID);
                if (innerTimeElementId != null) {
                    var timeElement = document.getElementById(innerTimeElementId);
                    var stateElement = document.getElementById("state" + AuctionID);
                    if (timeElement != null) timeElement.innerHTML = newTime;
                    if (stateElement != null) {
                        stateElement.innerHTML = "<p>" + newState + "</p>";
                        if (newState == 4) stateElement.style.color = "blue";
                        else stateElement.style.color = "red";
                    }
                    if (document.getElementById("bid" + AuctionID) != null)
                        document.getElementById("bid" + AuctionID).disabled = true;
                }
            };

            conn.client.timeUp = function() {
                document.getElementById("errors").innerHTML = "You're too late, sorry!";
                document.getElementById("errors").style.visibility = "visible";
            };

            conn.client.sendDuration = function (AuctionID, duration) {
                var innerElementId = getIdOfInnerElement("time" + AuctionID);
                if (innerElementId != null) {
                    myTimers[parseInt(innerElementId.substring(9, innerElementId.length))] = setTimeout(updateTime, 0, duration, innerElementId);
                }
            };

            conn.client.concurrencyIssue = function () {
                document.getElementById("errors").innerHTML = "Someone modified this auction before you tried to bid. Check if you want to try again.";
                document.getElementById("errors").style.visibility = "visible";
            };

            conn.client.tenSecondRule = function (AuctionID) {
                var innerElementId = getIdOfInnerElement("time" + AuctionID);
                if (innerElementId != null) {
                    var index = parseInt(innerElementId.substring(9, innerElementId.length));
                    clearTimeout(myTimers[index]);
                    myTimers[index] = setTimeout(updateTime, 0, 10, innerElementId);
                }
            };

            function getIdOfInnerElement(outerElementId) {
                var outerElement = document.getElementById(outerElementId);
                if (outerElement == null) return null;
                var innerElement = outerElement.innerHTML;
                var firstIndex = innerElement.indexOf('"');
                var secondIndex = innerElement.lastIndexOf('"');
                if (firstIndex == -1 || secondIndex == -1) return null;
                var returnValue = innerElement.substring(firstIndex + 1, secondIndex);
                return returnValue;
            }

            function updateTime(seconds, elementId) {
                //parsing time string
                var newTime = "";
                var days = Math.floor(seconds / (60 * 60 * 24));
                if (days > 9) newTime += days + ":";
                if (days > 0 && days <= 9) newTime += "0" + days + ":";
                if (days == 0) newTime += "00:";
                var hours = Math.floor((seconds / 3600) % 24);
                if (hours > 9) newTime += hours + ":";
                if (hours > 0 && hours <= 9) newTime += "0" + hours + ":";
                if (hours == 0) newTime += "00:";
                var minutes = Math.floor((seconds / 60) % 60);
                if (minutes > 9) newTime += minutes + ":";
                if (minutes > 0 && minutes <= 9) newTime += "0" + minutes + ":";
                if (minutes == 0) newTime += "00:";
                var newSeconds = Math.floor(seconds % 60);
                if (newSeconds > 9) newTime += newSeconds;
                if (newSeconds > 0 && newSeconds <= 9) newTime += "0" + newSeconds;
                if (newSeconds == 0) newTime += "00";

                //sets the time inside the timer element
                var timeElement = document.getElementById(elementId);
                if (timeElement != null) timeElement.innerHTML = newTime;

                var index = parseInt(elementId.substring(9, elementId.length));

                //calls function again if there's more time left
                if (seconds - 1 >= 0) myTimers[index] = setTimeout(updateTime, 1000, seconds - 1, elementId);
            }

            $.connection.hub.start().done(function () {

                conn.server.getTimes();

                $('.btnBid').click(function (event) {

                    var idBtnJquery = $(event.target).attr('id');
                    var idBtn = idBtnJquery.substring(3, idBtnJquery.length);
                    var val = $('#user').val();
                    var rv = document.getElementById("rv" + idBtn).value;

                    conn.server.bid(idBtn, val, rv);

                });
            });


        });
</script>    
    
}
