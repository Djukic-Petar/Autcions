@model IEP_Petar.Models.Auction
@using Microsoft.AspNet.Identity;

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<style>
    img {
        max-width: 100%;
    }

    .btn-custom {
        background-color: hsl(218, 71%, 30%) !important;
        background-repeat: repeat-x;
        filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#6291e4", endColorstr="#163e82");
        background-image: -moz-linear-gradient(top, #6291e4, #163e82);
        background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #6291e4), color-stop(100%, #163e82));
        background-image: -webkit-linear-gradient(top, #6291e4, #163e82);
        background-image: -o-linear-gradient(top, #6291e4, #163e82);
        background-image: linear-gradient(#6291e4, #163e82);
        border-color: #163e82 #163e82 hsl(218, 71%, 21.5%);
        color: #fff !important;
        text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.56);
        -webkit-font-smoothing: antialiased;
        border-radius: 10px;
    }

    .tbclass {
        height: 30px;
        width: 150px;
    }

    .priceclass {
        height: 30px;
        width: 50px;
    }

    .selectclass {
        height: 30px;
        width: 100px;
    }

    .customclass {
        margin-top: 1.7em;
    }
</style>

<h2></h2>

<p>@ViewBag.BiddingError</p>
<p id="errors" style="color:red;visibility:hidden;"></p>
<div>
    <h4>Auction</h4>
    <hr />
    <div class="col-sm-3" style="padding:5px 10px 5px 10px; text-align:center; height:100%;">
        <div class="well well-sm" style="height:420px;border-radius:10px;">
            @if (Model.State != 6)
            {
                if (Model.State == 3 || Model.State == 4 || Model.State == 5 || User.IsInRole("Admin"))
                {
                    <div style="word-wrap: break-word;font-size:x-large;">
                        <a href="/Auctions/Details/@Model.AuctionId"><b>@Html.DisplayFor(modelItem => Model.ProductName)</b><br /></a>
                    </div>
                    <div align="center">
                        <img class="img-rounded" src="data:image;base64,@System.Convert.ToBase64String(Model.Photo)" height="150" width="150" style="padding-top:7px;padding-bottom:7px;" /><br /><br />
                    </div>
                    string stateId = "state" + Model.AuctionId;
                    string timeId = "time" + Model.AuctionId;
                    string innerTimeId = "innerTime" + 1;
                    <div>
                        <div id="@timeId" style="font-size:x-large;font-weight:bold;">
                            <div id="@innerTimeId"></div>
                        </div>
                    </div>
                    <br />
                    <div id="@stateId" style="font-weight:bold;font-size:medium;">
                        @if (Model.State == 1)
                        {
                            <p><b>DRAFT</b></p>
                        }
                        @if (Model.State == 2)
                        {
                            <p><b>READY</b></p>
                        }
                        @if (Model.State == 3)
                        {
                            <p style="color:green;"><b>OPEN</b></p>
                        }
                        @if (Model.State == 4)
                        {
                            <p style="color:blue;"><b>SOLD</b></p>
                        }
                        @if (Model.State == 5)
                        {
                            <p style="color:red;"><b>EXPIRED</b></p>
                        }
                    </div>
                    string bidderId = "bidder" + Model.AuctionId;
                    <div id="@bidderId">
                        @if (Model.ApplicationUser != null)
                        {
                            var bidderString = Model.ApplicationUser.Name + " " + Model.ApplicationUser.Surname;
                            @bidderString
                        }
                        @if (Model.ApplicationUser == null)
                        {
                            <div>No bids yet!</div>
                        }
                    </div>
                    string priceId = "price" + Model.AuctionId;
                    string price = Model.CurrentPrice + " din";
                    <div id="@priceId">
                        @price
                    </div>
                    <br />
                    if (User.IsInRole("Admin"))
                    {
                        <div>
                            @if (Model.State == 1 || Model.State == 2)
                            {
                                var blankSpace = " ";
                                if (Model.State == 2)
                                {
                                    @Html.ActionLink("Open", "Open", new { id = Model.AuctionId }, new { @class = "btn btn-custom" })
                                }
                                if (Model.State == 1)
                                {
                                    @Html.ActionLink("Edit", "Edit", new { id = Model.AuctionId }, new { @class = "btn btn-custom" })
                                }
                                @blankSpace @Html.ActionLink("Delete", "Delete", new { id = Model.AuctionId }, new { @class = "btn btn-custom" })
                            }
                        </div>
                    }
                    else
                    {
                        var rv = Convert.ToBase64String(Model.RowVersion); var rvId = "rv" + Model.AuctionId;
                        var bidBtnId = "bid" + Model.AuctionId;
                        <input type="hidden" id="@rvId" value="@rv" />
                        <div>
                            @if (Model.State == 3 && User.Identity.IsAuthenticated)
                            {
                                <button class="btnBid btn btn-custom" id="@bidBtnId">Bid!</button>
                            }
                        </div>
                    }
                }
            }
        </div>
    </div>

    <div class="col-sm-4" style="vertical-align:central;">
        <div style="word-wrap: break-word;font-size:x-large;color:#428bca;font-weight:bold">Recent bids:<br /><br /></div>
        <div>
            @{
                var sortedBids = Model.Bids.OrderByDescending(b => b.Time);
                String[] bidders = new String[10];
                int[] prices = new int[10];
                for (int i = 0; i < 10; i++)
                {
                    if (sortedBids.Count() >= i + 1)
                    {

                        bidders[i] = sortedBids.ElementAt(i).ApplicationUser.Name + " " + sortedBids.ElementAt(i).ApplicationUser.Surname;
                        prices[i] = sortedBids.ElementAt(i).Amount;
                    }
                }
            }

            <table class="table table-striped table-responsive">
                <tr>
                    <th>Bidder</th>
                    <th>Price</th>
                </tr>
                <tr>
                    <td id="bidder1">@bidders[0]</td>
                    <td id="price1">
                        @if (bidders[0] != null)
                        {<p>@prices[0]</p>}
                    </td>
                </tr>
                <tr>
                    <td id="bidder2">@bidders[1]</td>
                    <td id="price2">
                        @if (bidders[1] != null)
                        {<p>@prices[1]</p>}
                    </td>
                </tr>
                <tr>
                    <td id="bidder3">@bidders[2]</td>
                    <td id="price3">
                        @if (bidders[2] != null)
                        {<p>@prices[2]</p>}
                    </td>
                </tr>
                <tr>
                    <td id="bidder4">@bidders[3]</td>
                    <td id="price4">
                        @if (bidders[3] != null)
                        {<p>@prices[3]</p>}
                    </td>
                </tr>
                <tr>
                    <td id="bidder5">@bidders[4]</td>
                    <td id="price5">
                        @if (bidders[4] != null)
                        {<p>@prices[4]</p>}
                    </td>
                </tr>
                <tr>
                    <td id="bidder6">@bidders[5]</td>
                    <td id="price6">
                        @if (bidders[5] != null)
                        {<p>@prices[5]</p>}
                    </td>
                </tr>
                <tr>
                    <td id="bidder7">@bidders[6]</td>
                    <td id="price7">
                        @if (bidders[6] != null)
                        {<p>@prices[6]</p>}
                    </td>
                </tr>
                <tr>
                    <td id="bidder8">@bidders[7]</td>
                    <td id="price8">
                        @if (bidders[7] != null)
                        {<p>@prices[7]</p>}
                    </td>
                </tr>
                <tr>
                    <td id="bidder9">@bidders[8]</td>
                    <td id="price9">
                        @if (bidders[8] != null)
                        {<p>@prices[8]</p>}
                    </td>
                </tr>
                <tr>
                    <td id="bidder10">@bidders[9]</td>
                    <td id="price10">
                        @if (bidders[9] != null)
                        {<p>@prices[9]</p>}
                    </td>
                </tr>

            </table>
        </div>
    </div>
</div>

    @*
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.ProductName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.ProductName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Duration)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Duration)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.StartPrice)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.StartPrice)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.CurrentPrice)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.CurrentPrice)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.CreationTime)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.CreationTime)
        </dd>

        @if (Model.State != 1 && Model.State != 2)
        {
            <dt>
                @Html.DisplayNameFor(model => model.OpeningTime)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.OpeningTime)
            </dd>

            <dt>
                @Html.DisplayNameFor(model => model.ClosingTime)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.ClosingTime)
            </dd>
        }
        <dt>
            @Html.DisplayNameFor(model => model.State)
        </dt>
        <dd>
        @{
        switch (Model.State) {
            case 1:
                <text>
                Draft
                </text>
                break;
            case 2:
                <text>
                Ready
                </text>
                break;
            case 3:
                <text>
                Open
                </text>
                break;
            case 4:
                <text>
                Sold
                </text>
                break;
            case 5:
                <text>
                Expired
                </text>
                break;
            case 6:
                <text>
                Deleted
                </text>
                break;
            default:
                <text>
                Unknown
                </text>
            break;
    }
}
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Photo)
        </dt>

        <dd>
            @{
                var base64 = Convert.ToBase64String(Model.Photo);
                var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
            }

            <img src="@imgSrc" />
        </dd>
    </dl>
        *@

<input type="hidden" id="user" value="@User.Identity.GetUserId()" />
<p>
    @if (User.IsInRole("Admin") && (Model.State == 1 || Model.State == 2)) //Edit moguc ako je aukcija READY ili DRAFT, i admin je ulogovan
    {
        @Html.ActionLink("Edit", "Edit", new { id = Model.AuctionId })
        <text>|</text>
    }
    @Html.ActionLink("Back to List", "Index")
</p>
@section scripts {
    <script src="~/Scripts/jquery.signalR-2.2.1.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script>
        $(function () {

            var conn = $.connection.auctionsHub;

            var myTimers = [null, null, null, null, null, null, null, null, null, null, null, null];

            conn.client.newBid = function (AuctionID, lastBidder, currentPrice, newRowVersion) {

                document.getElementById("bidder" + AuctionID).innerHTML = lastBidder;
                document.getElementById("price" + AuctionID).innerHTML = currentPrice + " din";
                document.getElementById("rv" + AuctionID).value = newRowVersion;

                document.getElementById("errors").innerHTML = "";
                document.getElementById("errors").visibility = "hidden";
            };

            conn.client.unsuccessfulBid = function () {
                document.getElementById("errors").innerHTML = "You don't have enough tokens to bid in this auction!";
                document.getElementById("errors").style.visibility = "visible";
            };

            conn.client.debugMessage = function (message) {
                alert(message);
            };

            conn.client.tickTime = function (AuctionID, newTime, newState) {

                var innerTimeElementId = getIdOfInnerElement("time" + AuctionID);
                if (innerTimeElementId != null) {
                    var timeElement = document.getElementById(innerTimeElementId);
                    var stateElement = document.getElementById("state" + AuctionID);
                    if (timeElement != null) timeElement.innerHTML = newTime;
                    if (stateElement != null) {
                        stateElement.innerHTML = "<p>" + newState + "</p>";
                        if (newState == 4) stateElement.style.color = "blue";
                        else stateElement.style.color = "red";
                    }
                    if (document.getElementById("bid" + AuctionID) != null)
                        document.getElementById("bid" + AuctionID).disabled = true;
                }
            };

            conn.client.timeUp = function() {
                document.getElementById("errors").innerHTML = "You're too late, sorry!";
                document.getElementById("errors").style.visibility = "visible";
            };

            conn.client.sendDuration = function (AuctionID, duration) {
                var innerElementId = getIdOfInnerElement("time" + AuctionID);
                if (innerElementId != null) {
                    myTimers[parseInt(innerElementId.substring(9, innerElementId.length))] = setTimeout(updateTime, 0, duration, innerElementId);
                }
            };

            conn.client.concurrencyIssue = function () {
                document.getElementById("errors").innerHTML = "Someone modified this auction before you tried to bid. Check if you want to try again.";
                document.getElementById("errors").style.visibility = "visible";
            };

            conn.client.tenSecondRule = function (AuctionID) {
                var innerElementId = getIdOfInnerElement("time" + AuctionID);
                if (innerElementId != null) {
                    var index = parseInt(innerElementId.substring(9, innerElementId.length));
                    clearTimeout(myTimers[index]);
                    myTimers[index] = setTimeout(updateTime, 0, 10, innerElementId);
                }
            };

            function getIdOfInnerElement(outerElementId) {
                var outerElement = document.getElementById(outerElementId);
                if (outerElement == null) return null;
                var innerElement = outerElement.innerHTML;
                var firstIndex = innerElement.indexOf('"');
                var secondIndex = innerElement.lastIndexOf('"');
                if (firstIndex == -1 || secondIndex == -1) return null;
                var returnValue = innerElement.substring(firstIndex + 1, secondIndex);
                return returnValue;
            }

            function updateTime(seconds, elementId) {
                //parsing time string
                var newTime = "";
                var days = Math.floor(seconds / (60 * 60 * 24));
                if (days > 9) newTime += days + ":";
                if (days > 0 && days <= 9) newTime += "0" + days + ":";
                if (days == 0) newTime += "00:";
                var hours = Math.floor((seconds / 3600) % 24);
                if (hours > 9) newTime += hours + ":";
                if (hours > 0 && hours <= 9) newTime += "0" + hours + ":";
                if (hours == 0) newTime += "00:";
                var minutes = Math.floor((seconds / 60) % 60);
                if (minutes > 9) newTime += minutes + ":";
                if (minutes > 0 && minutes <= 9) newTime += "0" + minutes + ":";
                if (minutes == 0) newTime += "00:";
                var newSeconds = Math.floor(seconds % 60);
                if (newSeconds > 9) newTime += newSeconds;
                if (newSeconds > 0 && newSeconds <= 9) newTime += "0" + newSeconds;
                if (newSeconds == 0) newTime += "00";

                //sets the time inside the timer element
                var timeElement = document.getElementById(elementId);
                if (timeElement != null) timeElement.innerHTML = newTime;

                var index = parseInt(elementId.substring(9, elementId.length));

                //calls function again if there's more time left
                if (seconds - 1 >= 0) myTimers[index] = setTimeout(updateTime, 1000, seconds - 1, elementId);
            }

            $.connection.hub.start().done(function () {

                conn.server.getTimes();

                $('.btnBid').click(function (event) {

                    var idBtnJquery = $(event.target).attr('id');
                    var idBtn = idBtnJquery.substring(3, idBtnJquery.length);
                    var val = $('#user').val();
                    var rv = document.getElementById("rv" + idBtn).value;

                    conn.server.bid(idBtn, val, rv);

                });
            });


        });
    </script>

}
